<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>tuling-juc-3</artifactId>
        <groupId>com.it.edu</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>Atomic-Unsafe-vip-course04</artifactId>

    <build>
        <plugins>
            <plugin>
                <!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
                    <!-- 源代码使用的JDK版本 -->
                    <source>1.8</source>
                    <!-- 需要生成的目标class文件的编译版本 -->
                    <target>1.8</target>
                    <!-- 字符集编码 -->
                    <encoding>UTF-8</encoding>

                    <verbose>true</verbose>
                    <showWarnings>true</showWarnings>
                    <!-- 要使compilerVersion标签生效，还需要将fork设为true，
                        用于明确表示编译版本配置的可用 -->
                    <fork>true</fork>
                    <!-- 使用指定的javac命令，
                        例如：<executable>${JAVA_1_4_HOME}/bin/javac</executable> -->
                    <executable><!-- path-to-javac --></executable>
                    <!-- 指定插件将使用的编译器的版本 -->
                    <compilerVersion>1.8</compilerVersion>
                    <!-- 编译器使用的初始内存 -->
                    <meminitial>128m</meminitial>
                    <!-- 编译器使用的最大内存 -->
                    <maxmem>512m</maxmem>
                    <!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 -->
                    <!--<compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument>-->
                </configuration>
            </plugin>
<!--            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>6</source>
                    <target>6</target>
                </configuration>
            </plugin>-->
        </plugins>
    </build>

</project>